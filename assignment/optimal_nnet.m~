function min_err_neuron = optimal_nnet(X, T)
%OPTIMIAL_HNEURONS Return the optmial number of hidden neurons
%   The number of neurons in a hidden layer is considered as a
%   hyper-parameter. The value of the hyper-paramenter is optmized using
%   10-fold cross-validation.
    NN = cell(1,10);
    net = patternnet(hiddenNeurons);
    min_err = Inf;
    CVO = cvpartition(T(:,1), 'k', 10);
    err = zeros(CVO.NumTestSets,1);
    for i = 1:CVO.NumTestSets
        trIdx = CVO.training(i);
        teIdx = CVO.test(i);
        train_inputs= X(trIdx,:);
        train_outputs= T(trIdx,:);
        test_inputs= X(teIdx,:);
        test_outputs= T(teIdx,:);
        net.trainParam.max_fail = 10;
        net.performParam.regularization = 0.01;
        net.trainParam.showWindow = false;
        NN{i} = train(net, train_inputs', train_outputs');
        y = NN{i}(test_inputs');
        [~,cm,~,~] = confusion(test_outputs', y);
        err(i) = 0.5*(cm(1,2)/(cm(1,1)+cm(1,2)) + cm(2,1)/(cm(2,1)+cm(2,2)));
    end
    all_err = sum(err)/CVO.NumTestSets;
    if all_err < min_err
        min_err = all_err;
        min_err_neuron = hiddenNeurons;
    end
end

